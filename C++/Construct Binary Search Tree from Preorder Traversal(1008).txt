/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    int i=0;
public:
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        vector<int> inorder;
        for(int i=0; i<preorder.size();i++){
            inorder.push_back(preorder[i]);
        }
        sort(inorder.begin(), inorder.end());
        
        unordered_map<int,int> m;
        for(int i=0; i<inorder.size(); i++){
            m[inorder[i]] = i ; 
        }
        int s = 0;
        int e = inorder.size()-1;
        TreeNode* root = formTree(preorder, inorder, s, e, m);
        
        return root;
    }
    TreeNode* formTree(vector<int> &preorder, vector<int> &inorder, int s, int e, unordered_map<int, int> &m){
        if(s>e) return NULL;
        int idx = m[preorder[i]];
        i++;
        TreeNode* root = new TreeNode(inorder[idx]);
        root->left = formTree(preorder, inorder, s, idx-1, m); 
        root->right = formTree(preorder, inorder, idx+1, e, m);
        return root;
    }
};